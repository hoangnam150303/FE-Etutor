import { Breadcrumb, Select, Input, Modal, Button, Form as AntForm } from "antd";
import TextArea from "antd/es/input/TextArea";
import { Content } from "antd/es/layout/layout";
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";

const { Search } = Input;

let blogs = [
    {
        title: "H∆∞·ªõng d·∫´n b·∫Øt ƒë·∫ßu v·ªõi React.js",
        description: "B√†i vi·∫øt n√†y s·∫Ω h∆∞·ªõng d·∫´n b·∫°n t·ª´ng b∆∞·ªõc ƒë·ªÉ b·∫Øt ƒë·∫ßu l√†m vi·ªác v·ªõi React.js.",
        author: "John Doe"
    },
    {
        title: "C√°ch nhanh ch√≥ng h·ªçc Angular t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao",
        description: "Nh·ªØng ƒëi·ªÅu c∆° b·∫£n b·∫°n c·∫ßn bi·∫øt v√† nh·ªØng th·ªß thu·∫≠t n√¢ng cao ƒë·ªÉ tr·ªü th√†nh m·ªôt l·∫≠p tr√¨nh vi√™n Angular gi·ªèi.",
        author: "Jane Smith"
    },
    {
        title: "L√†m th·∫ø n√†o ƒë·ªÉ t·ªëi ∆∞u h√≥a website c·ªßa b·∫°n cho t·ªëc ƒë·ªô t·∫£i nhanh",
        description: "B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p nh·ªØng chi·∫øn l∆∞·ª£c v√† c√¥ng c·ª• ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t t·∫£i trang web c·ªßa b·∫°n.",
        author: "David Johnson"
    },
    {
        title: "10 framework JavaScript ph·ªï bi·∫øn b·∫°n n√™n bi·∫øt",
        description: "T·ªïng quan v·ªÅ c√°c framework JavaScript ph·ªï bi·∫øn nh·∫•t hi·ªán nay v√† l√Ω do t·∫°i sao b·∫°n n√™n s·ª≠ d·ª•ng ch√∫ng.",
        author: "Emily Brown"
    },
    {
        title: "T·∫°i sao TypeScript l√† m·ªôt l·ª±a ch·ªçn t·ªët cho d·ª± √°n c·ªßa b·∫°n",
        description: "L√Ω do v√† l·ª£i √≠ch c·ªßa vi·ªác s·ª≠ d·ª•ng TypeScript trong c√°c d·ª± √°n ph·∫ßn m·ªÅm c·ªßa b·∫°n.",
        author: "Michael Clark"
    },
    {
        title: "C√°c th·ªß thu·∫≠t ƒë·ªÉ tr·ªü th√†nh m·ªôt l·∫≠p tr√¨nh vi√™n front-end xu·∫•t s·∫Øc",
        description: "Nh·ªØng b√≠ quy·∫øt v√† kinh nghi·ªám ƒë·ªÉ ph√°t tri·ªÉn k·ªπ nƒÉng l·∫≠p tr√¨nh front-end c·ªßa b·∫°n.",
        author: "Sophia Rodriguez"
    },
    {
        title: "L√†m th·∫ø n√†o ƒë·ªÉ thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng hi·ªáu qu·∫£",
        description: "Nh·ªØng nguy√™n t·∫Øc thi·∫øt k·∫ø UI/UX ƒë·ªÉ t·ªëi ∆∞u h√≥a tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.",
        author: "Daniel Lee"
    },
    {
        title: "T·∫°i sao Agile l√† ph∆∞∆°ng ph√°p ph√°t tri·ªÉn ph·∫ßn m·ªÅm ph·ªï bi·∫øn nh·∫•t",
        description: "L·ª£i √≠ch c·ªßa vi·ªác √°p d·ª•ng ph∆∞∆°ng ph√°p Agile trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm v√† c√°c th·ª±c ti·ªÖn hi·ªáu qu·∫£.",
        author: "Jessica Wang"
    },
    {
        title: "C√°ch s·ª≠ d·ª•ng Node.js ƒë·ªÉ x√¢y d·ª±ng c√°c ·ª©ng d·ª•ng web m·∫°nh m·∫Ω",
        description: "H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc ƒë·ªÉ b·∫Øt ƒë·∫ßu v·ªõi Node.js v√† x√¢y d·ª±ng c√°c ·ª©ng d·ª•ng web ph·ª©c t·∫°p.",
        author: "Andrew Miller"
    },
    {
        title: "L√†m th·∫ø n√†o ƒë·ªÉ b·∫£o m·∫≠t ·ª©ng d·ª•ng web c·ªßa b·∫°n ch·ªëng l·∫°i c√°c cu·ªôc t·∫•n c√¥ng",
        description: "C√°c chi·∫øn l∆∞·ª£c v√† c√¥ng c·ª• ƒë·ªÉ b·∫£o v·ªá ·ª©ng d·ª•ng web c·ªßa b·∫°n kh·ªèi c√°c m·ªëi ƒëe d·ªça an ninh m·∫°ng.",
        author: "Alexandra Martinez"
    }
];

const UserBlog = () => {

    const onSearch = (value, _e, info) => console.log(info?.source, value);

    const handleChangeFilter = (value) => {
        console.log(`selected ${value}`);
    };

    const navigate = useNavigate();

    const handleDetailClick = () => {
        navigate(`/user/blog/:id`);
    };

    // T·∫°o Blog
    const [isModalOpenBlog, setIsModalOpenBlog] = useState(false);
    const showModalBlog = () => {
        setIsModalOpenBlog(true);
    };
    const handleOkBlog = () => {
        setIsModalOpenBlog(false);
    };
    const handleCancelBlog = () => {
        setIsModalOpenBlog(false);
    };

    const handleChange = (value) => {
        console.log(`selected ${value}`);
    };

    const validationSchema = Yup.object().shape({
        title: Yup.string()
            .min(5, "Title ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±")
            .max(100, "Title kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±")
            .required("Vui l√≤ng nh·∫≠p Title"),
        description: Yup.string()
            .min(10, "Description ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±")
            .required("Vui l√≤ng nh·∫≠p Description"),
        courseName: Yup.array()
            .min(1, "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kh√≥a h·ªçc")
            .required("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kh√≥a h·ªçc"),
    });

    return (
        <div className="">
            <Content className='mx-2 my-7 lg:mx-5'>
                <Breadcrumb className="mb-2 lg:my-5 lg:mx-3 text-base">
                    <Breadcrumb.Item>User</Breadcrumb.Item>
                    <Breadcrumb.Item className="text-[#f18966] font-bold">Blog üëãüèª</Breadcrumb.Item>
                </Breadcrumb>
                <div className="">
                    <div className="top-body flex justify-between items-center">
                        <div className="top-body-search">
                            <Search
                                placeholder="input search text"
                                allowClear
                                onSearch={onSearch}
                                style={{
                                    width: 500,
                                }}
                            />
                        </div>
                        <div className="top-body-select">
                            <Select
                                defaultValue="lucy"
                                style={{
                                    width: 200,
                                }}
                                onChange={handleChangeFilter}
                                options={[
                                    {
                                        value: 'jack',
                                        label: 'Jack',
                                    },
                                    {
                                        value: 'lucy',
                                        label: 'Lucy',
                                    },
                                    {
                                        value: 'Yiminghe',
                                        label: 'yiminghe',
                                    },
                                    {
                                        value: 'disabled',
                                        label: 'Disabled',
                                        disabled: true,
                                    },
                                ]}
                            />
                        </div>
                        <div className="top-body-create_blog">
                            <button className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded duration-500" onClick={showModalBlog}>Create Blog</button>
                        </div>
                        <Modal footer={null} title="Create Blog" open={isModalOpenBlog} onOk={handleOkBlog} onCancel={handleCancelBlog} width={750}>
                            <Formik
                                initialValues={{ title: "", description: "", courseName: [] }}
                                validationSchema={validationSchema}
                                onSubmit={(values, { resetForm }) => {
                                    console.log("Form data:", values);
                                    resetForm();
                                    setIsModalOpenBlog(false);
                                }}
                            >
                                {({ setFieldValue, values, handleSubmit }) => (
                                    <Form className="space-y-4">
                                        <div>
                                            <label className="font-bold">Title</label>
                                            <Field name="title" as={Input} />
                                            <ErrorMessage name="title" component="div" className="text-red-500 text-sm" />
                                        </div>

                                        <div>
                                            <label className="font-bold">Content</label>
                                            <Field name="description" as={TextArea} rows={5} />
                                            <ErrorMessage name="description" component="div" className="text-red-500 text-sm" />
                                        </div>

                                        <div>
                                            <label className="font-bold">Course name</label>
                                            <Field name="courseName">
                                                {({ field, form }) => (
                                                    <>
                                                        <Select
                                                            mode="multiple"
                                                            style={{ width: "100%" }}
                                                            onChange={(value) => form.setFieldValue("courseName", value)}
                                                            value={form.values.courseName}
                                                            options={[
                                                                { label: "Tutor 1", value: "tutor1" },
                                                                { label: "Tutor 2", value: "tutor2" },
                                                            ]}
                                                        />
                                                        {form.errors.courseName && form.touched.courseName ? (
                                                            <div className="text-red-500 text-sm">{form.errors.courseName}</div>
                                                        ) : null}
                                                    </>
                                                )}
                                            </Field>
                                        </div>


                                        <div className="flex justify-end">
                                            <Button type="primary" htmlType="submit" onClick={handleSubmit}>
                                                Submit
                                            </Button>
                                        </div>
                                    </Form>
                                )}
                            </Formik>
                        </Modal>
                    </div>
                    <div className="bottom-body my-5">
                        <div className="list-blog">
                            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                                {blogs.map((blog, index) => (
                                    <div className="" key={index}>
                                        <div className="bg-white rounded-2xl shadow-md p-5 hover:shadow-lg transition-all border border-gray-200">
                                            <h2 className="text-xl font-bold text-gray-800 mb-2 line-clamp-2">{blog.title}</h2>
                                            <p className="text-gray-600 mb-3 line-clamp-4">{blog.description}</p>
                                            <p className="text-sm text-gray-500 mb-5">Author: <span className="font-semibold text-red-500">{blog.author}</span></p>
                                            <div className="flex justify-end">
                                                <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded duration-500" onClick={() => handleDetailClick()}>Detail</button>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            </Content>

        </div>
    );
};

export default UserBlog;